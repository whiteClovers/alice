package com.iwonder.alice.pro.action;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import com.iwonder.alice.framework.vo.PageView;
import com.iwonder.alice.framework.vo.PageViewEasyUIWrapper;
import com.iwonder.alice.pro.entity.ProLoan;
import com.iwonder.alice.pro.entity.ProLoanExample;
import com.iwonder.alice.pro.entity.ProLoanExample.Criteria;
import com.iwonder.alice.pro.service.IProLoanService;




@Controller
@RequestMapping("/admin/pro/proLoan/")

public class ProLoanAdminAction {
	@Autowired
	IProLoanService proLoanService;
/*	
	@RequestMapping("list")
	public String list(HttpServletRequest request, HttpServletResponse response) {
		ProLoanExample proLoanExample = new ProLoanExample() ;
		
		 Criteria criteria = proLoanExample.createCriteria();
		criteria.andLoanIdIsNotNull(); 
		
		List<ProLoan> listProLoan = proLoanService.selectByExample(proLoanExample) ;
		request.setAttribute("listProLoan", listProLoan);
		
		return "admin/pro/proLoan" ;
	}
	
		@RequestMapping("update")
		public String update(HttpServletRequest request, HttpServletResponse response) {
			ProLoanExample proLoanExample = new ProLoanExample() ;
			String name = request.getParameter("name");
			System.out.println("name"+name);
	
			return null;
	}*/
	@RequestMapping("page")
	public String page(HttpServletRequest request, HttpServletResponse response) {
	
		return "admin/pro/proLoan_list";
		
	}
	
	
	@RequestMapping("pageAjax")
	@ResponseBody
	public PageViewEasyUIWrapper pageAj(HttpServletRequest request, HttpServletResponse response) {
		PageView pageView = new PageView() ;
		
		String sort = request.getParameter("sort") ;
		String order = request.getParameter("order") ;//前台已封装
		
		
		
		String strPage = request.getParameter("page") ;
		String strRows = request.getParameter("rows") ;//前台已封装
		
//		String strPageIndex = request.getParameter("pageIndex") ;
//		String strPageSize = request.getParameter("pageSize") ;
		
		//加查询条件
		String name= request.getParameter("name") ;
		
		int pageIndex = 0 ;
		int pageSize = 5 ;
		
		if(!StringUtils.isEmpty(strPage)){
			pageIndex = Integer.parseInt(strPage) -1 ;
		}
		
		if(!StringUtils.isEmpty(strRows)){
			pageSize = Integer.parseInt(strRows) ;
		}
		
		
		ProLoanExample proLoanExample = new ProLoanExample() ;
		if(!StringUtils.isEmpty(sort)){
			proLoanExample.setOrderByClause(sort + " " + order);
		}
		Criteria criteria = proLoanExample.createCriteria();
		
		//加查询条件
		/*if(!StringUtils.isEmpty(name)){
			criteria.andNameLike(name + "%")  ;
		}*/
		
//		Map mapCondition = new HashMap() ;
//		mapCondition.put("name", name) ;
		
		Page<Object> page = PageHelper.startPage(pageIndex+1, pageSize) ;
		List<ProLoan> listProLoan = proLoanService.selectByExample(proLoanExample) ;
		
		pageView.setPageIndex(pageIndex);
		pageView.setPageSize(pageSize);
//		pageView.setMapCondition(mapCondition);
		
		
		pageView.setList(listProLoan);
		pageView.setRecordCount((int)page.getTotal());
		
		
		
		return new PageViewEasyUIWrapper(pageView) ;
	}
	@RequestMapping("edit")
	public String edit(HttpServletRequest request, HttpServletResponse response) {
		String loanId = request.getParameter("loanId");
	
		if(!(StringUtils.isEmpty(loanId))){
			
			 ProLoan proLoan = proLoanService.selectByPrimaryKey(loanId);
	

			request.setAttribute("proLoan",proLoan);
		}System.out.println("进入了edit方法loanId为"+loanId);

		return "admin/pro/proLoan_edit" ;
	}
	@RequestMapping("save")
	@ResponseBody
	public String save(ProLoan proLoan, HttpServletRequest request, HttpServletResponse response) {
		System.out.println(proLoan.toString());
		//customerService.insertSelective(customer);
		String result=null;
		try{
		if(proLoan.getLoanId()==null){
			System.out.println("进入了保存方法");
			proLoanService.insertSelective(proLoan);
		}else{
			System.out.println("proLoan.getLoanId()"+proLoan.getLoanId());
			System.out.println("进入了修改方法");
			proLoanService.updateByPrimaryKeySelective(proLoan);
		}
		result="操作成功";
		}catch(Exception e){
			e.printStackTrace();
			result="操作失败";	
		}
		return result ;
	}
	@RequestMapping("deleteRowsAj")
	@ResponseBody
	public String deleteRowsAj(@RequestParam("ids[]") String[] ids, HttpServletRequest request,
			HttpServletResponse response) {
		String result = null;
		try {
			proLoanService.deleteRows(ids);
		} catch (Exception ex) {
			result = "删除失败";
		}
		return result;
	}
	
	
	@RequestMapping("delete")
	@ResponseBody
	public String delete(ProLoan proLoan, HttpServletRequest request, HttpServletResponse response) {
		String result = null;
		System.out.println("进入了delete方法");
		System.out.println(proLoan.toString());
		try{
		System.out.println("customer.getCustomerId()"+proLoan.getLoanId());
		proLoanService.deleteByPrimaryKey(proLoan.getLoanId());
		result = "删除成功";
		}catch(Exception e){
			e.printStackTrace();
			result = "删除失败";
		}
		return result ;
	}
}
